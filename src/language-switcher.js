export const translations = {
  english: {
    mainTitle: "Natural Operational Semantics",
    helpButton: "Help",
    helpTitle: "üîç Help - How to Use the Program",
    pasteExample: "Paste Example",
    Example1: "Sequence",
    Example2: "Assignment",
    Example3: "Conditional",
    uploadProgramButton: "Upload Program",
    visualizeButton: "Visualize",
    plusButton: "+",
    minusButton: "-",
    wholeSequence: "Whole Sequence",
    stepByStep: "Step by Step",
    guessAllStatesButton: "Guess All States",
    enterAllStates: "Check",
    exportButton: "Export to SVG",
    exportLatexButton: "Export to LaTeX",
    copyButton: "Copy",
    latexExportLabel: "LaTeX Export",
    modalTitle: "Control Elements",
    modalVisualize: "Visualize Program",
    modalDefineVariables: "Define Variables",
    modalVisualizeBtn: "Visualize",
    modalSetVariables: "Set Variables",
    modalInstructions:
      'Use the "+" symbol to add a new variable. Employ the "‚àí" symbol to remove the last variable. To set entered variables, both the name and value are required.',
    forwardButton: "Forward",
    backButton: "Back",
    guessNextState: "Guess Next Iteration",
    checkButton: "Check Next Iteration",
    tabBasic: "üîß Basic Features",
    tabJane: "üìù JANE Language",
    tabModes: "üéÆ Program Modes",
    basicTitle: "üîß Basic Features",
    programInput: "‚å®Ô∏è Program Input",
    variablesManagement: "‚öôÔ∏è Variables",
    visualizationOptions: "üìä Visualization",
    janeTitle: "üìù JANE Language",
    basicSyntax: "üìö Syntax",
    examplePrograms: "üí° Examples",
    commonMistakes: "‚ö†Ô∏è Common Mistakes",
    modesTitle: "üéÆ Program Modes",
    executionModes: "‚öôÔ∏è Execution",
    learningModes: "üéì Learning",
    textEditor: "Text Editor",
    writeProgram: "Write your program in the main editor",
    examples: "Examples",
    pasteExampleDesc: 'Use "Paste Example" to try predefined programs',
    fileUpload: "File Upload",
    loadProgram: "Upload your own program files",
    addingVariables: "Adding Variables",
    clickPlus: 'Click "+" to add a new variable',
    removingVariables: "Removing Variables",
    clickMinus: 'Click "-" to remove the last variable',
    settingValues: "Setting Values",
    enterNameValue: "Enter name and value for each variable",
    wholeSequenceDesc: "View complete execution tree",
    stepByStepDesc: "Navigate through execution states",
    exportDesc: "Save visualization as SVG or LaTeX",
    variables: "Variables",
    variablesDesc: "x, y, j (case sensitive)",
    operations: "Operations",
    operationsDesc: "+, -, *, /, :=",
    conditions: "Conditions",
    conditionsDesc: "if, then, else",
    loops: "Loops",
    loopsDesc: "while, do",
    exampleCode: "// Simple assignment\nx := 5\n\n// Conditional statement\nif (x > 0) \n  {y := 1}\nelse{\n  y := 0}\n\n// While loop\nwhile (x > 0) {\n  x := x - 1}",
    incorrectVariableNames: "Incorrect variable names",
    uninitializedVariables: "Uninitialized variables",
    wholeSequenceMode: "Shows complete execution tree. All states visible at once. Best for understanding the complete program flow.",
    stepByStepMode: "Interactive navigation through states. Forward/Back buttons for movement. Detailed view of each transition.",
    guessNextStateMode: "Practice predicting the next program state. Instant feedback on predictions. Learn operational semantics rules.",
    guessAllStatesMode: "Challenge mode for complete execution. Test understanding of program flow. Comprehensive learning experience.",
    programFlow: "Full program flow",
    navigation: "Interactive navigation",
    controls: "Forward/Back control",
    transitions: "State transitions",
    nextState: "Next State",
    predictNext: "Predict next",
    getFeedback: "Get feedback",
    learnRules: "Learn rules",
    challengeMode: "Challenge mode",
    testKnowledge: "Test knowledge",
    masterFlow: "Master flow",
    states: "States",
    guessStateLabel: "Guess state",
    valuePlaceholder: "Value",
    variableName: "Variable name",
    valueLabel: "Value",
    variableNamePlaceholder: "Variable name",
    wholeTree: "Whole Tree",
    retryModalTitle: "Try Again?",
    retryModalText: "Would you like to try again?",
    retryModalYes: "Yes",
    retryModalNo: "No",
    incorrectAnswer: "Incorrect. Try again!",
    cancelButton: "Cancel",
    correctAnswer: "Correct answer!",
  },
  ukrainian: {
    mainTitle: "–ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–µ–º–∞–Ω—Ç–∏–∫–∞",
    helpButton: "–î–æ–ø–æ–º–æ–≥–∞",
    helpTitle: "üîç –î–æ–ø–æ–º–æ–≥–∞ - –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –ø—Ä–æ–≥—Ä–∞–º–æ—é",
    pasteExample: "–í—Å—Ç–∞–≤–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥",
    Example1: "–ü–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å",
    Example2: "–ü—Ä–∏—Å–≤–æ—î–Ω–Ω—è",
    Example3: "–£–º–æ–≤–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä",
    uploadProgramButton: "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É",
    visualizeButton: "–í—ñ–∑—É–∞–ª—ñ–∑—É–≤–∞—Ç–∏",
    plusButton: "+",
    minusButton: "-",
    wholeSequence: "–¶—ñ–ª–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å",
    stepByStep: "–ü–æ–∫—Ä–æ–∫–æ–≤–æ",
    guessAllStatesButton: "–í–≥–∞–¥–∞—Ç–∏ –≤—Å—ñ —Å—Ç–∞–Ω–∏",
    enterAllStates: "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏",
    exportButton: "–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤ SVG",
    exportLatexButton: "–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤ LaTeX",
    copyButton: "–ö–æ–ø—ñ—é–≤–∞—Ç–∏",
    latexExportLabel: "–ï–∫—Å–ø–æ—Ä—Ç LaTeX",
    modalTitle: "–ï–ª–µ–º–µ–Ω—Ç–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è",
    modalVisualize: "–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏",
    modalDefineVariables: "–í–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–º—ñ–Ω–Ω—ñ",
    modalVisualizeBtn: "–í—ñ–∑—É–∞–ª—ñ–∑—É–≤–∞—Ç–∏",
    modalSetVariables: "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–º—ñ–Ω–Ω—ñ",
    modalInstructions:
      '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–∏–º–≤–æ–ª "+" –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∑–º—ñ–Ω–Ω–æ—ó. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–∏–º–≤–æ–ª "‚àí" –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–º—ñ–Ω–Ω–æ—ó. –î–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –ø–æ—Ç—Ä—ñ–±–Ω—ñ —è–∫ —ñ–º\'—è, —Ç–∞–∫ —ñ –∑–Ω–∞—á–µ–Ω–Ω—è.',
    forwardButton: "–í–ø–µ—Ä–µ–¥",
    backButton: "–ù–∞–∑–∞–¥",
    guessNextState: "–í–≥–∞–¥–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É —ñ—Ç–µ—Ä–∞—Ü—ñ—é",
    checkButton: "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É —ñ—Ç–µ—Ä–∞—Ü—ñ—é",
    tabBasic: "üîß –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó",
    tabJane: "üìù –ú–æ–≤–∞ JANE",
    tabModes: "üéÆ –†–µ–∂–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–∏",
    basicTitle: "üîß –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó",
    programInput: "‚å®Ô∏è –í–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏",
    variablesManagement: "‚öôÔ∏è –ó–º—ñ–Ω–Ω—ñ",
    visualizationOptions: "üìä –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è",
    janeTitle: "üìù –ú–æ–≤–∞ JANE",
    basicSyntax: "üìö –°–∏–Ω—Ç–∞–∫—Å–∏—Å",
    examplePrograms: "üí° –ü—Ä–∏–∫–ª–∞–¥–∏",
    commonMistakes: "‚ö†Ô∏è –ü–æ—à–∏—Ä–µ–Ω—ñ –ø–æ–º–∏–ª–∫–∏",
    modesTitle: "üéÆ –†–µ–∂–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–∏",
    executionModes: "‚öôÔ∏è –í–∏–∫–æ–Ω–∞–Ω–Ω—è",
    learningModes: "üéì –ù–∞–≤—á–∞–Ω–Ω—è",
    textEditor: "–¢–µ–∫—Å—Ç–æ–≤–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä",
    writeProgram: "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–≥—Ä–∞–º—É –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ",
    examples: "–ü—Ä–∏–∫–ª–∞–¥–∏",
    pasteExampleDesc: '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ "–í—Å—Ç–∞–≤–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥" –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≥–æ—Ç–æ–≤–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤',
    fileUpload: "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É",
    loadProgram: "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à—ñ –≤–ª–∞—Å–Ω—ñ —Ñ–∞–π–ª–∏ –ø—Ä–æ–≥—Ä–∞–º",
    addingVariables: "–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö",
    clickPlus: '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "+" —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∑–º—ñ–Ω–Ω—É',
    removingVariables: "–í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö",
    clickMinus: '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "-" —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –∑–º—ñ–Ω–Ω—É',
    settingValues: "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å",
    enterNameValue: "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó",
    wholeSequenceDesc: "–ü–µ—Ä–µ–≥–ª—è–¥ –ø–æ–≤–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è",
    stepByStepDesc: "–ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ —Å—Ç–∞–Ω–∞—Ö –≤–∏–∫–æ–Ω–∞–Ω–Ω—è",
    exportDesc: "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó —è–∫ SVG –∞–±–æ LaTeX",
    variables: "–ó–º—ñ–Ω–Ω—ñ",
    variablesDesc: "x, y, j (—á—É—Ç–ª–∏–≤—ñ –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É)",
    operations: "–û–ø–µ—Ä–∞—Ü—ñ—ó",
    operationsDesc: "+, -, *, /, :=",
    conditions: "–£–º–æ–≤–∏",
    conditionsDesc: "if, then, else",
    loops: "–¶–∏–∫–ª–∏",
    loopsDesc: "while, do",
    exampleCode: "// –ü—Ä–æ—Å—Ç–µ –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è\\nx := 5\\n\\n/// –£–º–æ–≤–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä\nif (x > 0) \\n  {y := 1}\\nelse{\\n  y := 0}\n\n// –¶–∏–∫–ª while\nwhile (x > 0) {\\n  x := x - 1}",
    incorrectVariableNames: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ —ñ–º–µ–Ω–∞ –∑–º—ñ–Ω–Ω–∏—Ö",
    uninitializedVariables: "–ù–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –∑–º—ñ–Ω–Ω—ñ",
    wholeSequenceMode: "–ü–æ–∫–∞–∑—É—î –ø–æ–≤–Ω–µ –¥–µ—Ä–µ–≤–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è. –í—Å—ñ —Å—Ç–∞–Ω–∏ –≤–∏–¥–Ω–æ –æ–¥–Ω–æ—á–∞—Å–Ω–æ. –ù–∞–π–∫—Ä–∞—â–µ –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏.",
    stepByStepMode: "–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ —Å—Ç–∞–Ω–∞—Ö. –ö–Ω–æ–ø–∫–∏ –í–ø–µ—Ä–µ–¥/–ù–∞–∑–∞–¥ –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è. –î–µ—Ç–∞–ª—å–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥ –∫–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É.",
    guessNextStateMode: "–ü—Ä–∞–∫—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –ø—Ä–æ–≥—Ä–∞–º–∏. –ú–∏—Ç—Ç—î–≤–∏–π –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫ —â–æ–¥–æ –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω—å. –í–∏–≤—á–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–æ—ó —Å–µ–º–∞–Ω—Ç–∏–∫–∏.",
    guessAllStatesMode: "–†–µ–∂–∏–º –≤–∏–ø—Ä–æ–±—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –ø–æ—Ç–æ–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏. –í—Å–µ–±—ñ—á–Ω–∏–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –¥–æ—Å–≤—ñ–¥.",
    programFlow: "Full program flow",
    navigation: "Interactive navigation",
    controls: "Forward/Back control",
    transitions: "State transitions",
    nextState: "Next State",
    predictNext: "Predict next",
    getFeedback: "Get feedback",
    learnRules: "Learn rules",
    challengeMode: "Challenge mode",
    testKnowledge: "Test knowledge",
    masterFlow: "Master flow",
    states: "–°—Ç–∞–Ω–∏",
    guessStateLabel: "–í–≥–∞–¥–∞—Ç–∏ —Å—Ç–∞–Ω",
    valuePlaceholder: "–ó–Ω–∞—á–µ–Ω–Ω—è",
    variableName: "–ù–∞–∑–≤–∞ –∑–º—ñ–Ω–Ω–æ—ó",
    valueLabel: "–ó–Ω–∞—á–µ–Ω–Ω—è",
    variableNamePlaceholder: "–ù–∞–∑–≤–∞ –∑–º—ñ–Ω–Ω–æ—ó",
    wholeTree: "–íce –¥–µ—Ä–µ–≤–æ",
    retryModalTitle: "–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑?",
    retryModalText: "–ß–∏ —Ö–æ—á–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑?",
    retryModalYes: "–¢–∞–∫",
    retryModalNo: "–ù—ñ",
    incorrectAnswer: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!",
    cancelButton: "–°–∫–∞—Å—É–≤–∞—Ç–∏",
    correctAnswer: "–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å!",
  },
  slovak: {
    mainTitle: "Prirodzen√° operaƒçn√° s√©mantika",
    helpButton: "Pomoc",
    helpTitle: "üîç Pomoc - Ako pou≈æ√≠va≈• program",
    pasteExample: "Vlo≈æi≈• pr√≠klad",
    Example1: "Postupnos≈•",
    Example2: "Priradenie",
    Example3: "Podmienka",
    uploadProgramButton: "Nahra≈• program",
    visualizeButton: "Vizualizova≈•",
    plusButton: "+",
    minusButton: "-",
    wholeSequence: "Cel√° sekvencia",
    stepByStep: "Krok za krokom",
    guessAllStatesButton: "Uh√°dnu≈• v≈°etky stavy",
    enterAllStates: "Skontrolova≈•",
    exportButton: "Exportova≈• do SVG",
    exportLatexButton: "Exportova≈• do LaTeX",
    copyButton: "Kop√≠rova≈•",
    latexExportLabel: "Export LaTeX",
    modalTitle: "Ovl√°dacie prvky",
    modalVisualize: "Vizualizova≈• program",
    modalDefineVariables: "Definova≈• premenn√©",
    modalVisualizeBtn: "Vizualizova≈•",
    modalSetVariables: "Nastavi≈• premenn√©",
    modalInstructions:
      'Pou≈æite symbol "+" na pridanie novej premennej. Pou≈æite symbol "‚àí" na odstr√°nenie poslednej premennej. Na nastavenie zadan√Ωch premenn√Ωch s√∫ potrebn√© n√°zov aj hodnota.',
    forwardButton: "Dopredu",
    backButton: "Sp√§≈•",
    guessNextState: "Uh√°dnu≈• ƒèal≈°iu iter√°ciu",
    checkButton: "Skontrolova≈• ƒèal≈°iu iter√°ciu",
    tabBasic: "üîß Z√°kladn√© funkcie",
    tabJane: "üìù Jazyk JANE",
    tabModes: "üéÆ Re≈æimy programu",
    basicTitle: "üîß Z√°kladn√© funkcie",
    programInput: "‚å®Ô∏è Vstup programu",
    variablesManagement: "‚öôÔ∏è Premenn√©",
    visualizationOptions: "üìä Vizualiz√°cia",
    janeTitle: "üìù Jazyk JANE",
    basicSyntax: "üìö Syntax",
    examplePrograms: "üí° Pr√≠klady",
    commonMistakes: "‚ö†Ô∏è ƒåast√© chyby",
    modesTitle: "üéÆ Re≈æimy programu",
    executionModes: "‚öôÔ∏è Vykon√°vanie",
    learningModes: "üéì Uƒçenie",
    textEditor: "Textov√Ω editor",
    writeProgram: "Nap√≠≈°te svoj program v hlavnom editore",
    examples: "Pr√≠klady",
    pasteExampleDesc: 'Pou≈æite "Vlo≈æi≈• pr√≠klad" pre vysk√∫≈°anie predpripraven√Ωch pr√≠kladov',
    fileUpload: "Nahranie s√∫boru",
    loadProgram: "Nahrajte svoje vlastn√© programov√© s√∫bory",
    addingVariables: "Prid√°vanie premenn√Ωch",
    clickPlus: 'Kliknite na "+" pre pridanie novej premennej',
    removingVariables: "Odstra≈àovanie premenn√Ωch",
    clickMinus: 'Kliknite na "-" pre odstr√°nenie poslednej premennej',
    settingValues: "Nastavenie hodn√¥t",
    enterNameValue: "Zadajte n√°zov a hodnotu pre ka≈æd√∫ premenn√∫",
    wholeSequenceDesc: "Zobrazenie kompletn√©ho stromu vykon√°vania",
    stepByStepDesc: "Navig√°cia cez stavy vykon√°vania",
    exportDesc: "Ulo≈æenie vizualiz√°cie ako SVG alebo LaTeX",
    variables: "Premenn√©",
    variablesDesc: "x, y, j (citliv√© na veƒækos≈• p√≠smen)",
    operations: "Oper√°cie",
    operationsDesc: "+, -, *, /, :=",
    conditions: "Podmienky",
    conditionsDesc: "if, then, else",
    loops: "Cykly",
    loopsDesc: "while, do",
    exampleCode: "// Jednoduch√© priradenie\\nx := 5\\n\\n// Podmienen√Ω pr√≠kaz\nif (x > 0) \\n  {y := 1}\\nelse{\\n  y := 0}\n\n// Cyklus while\nwhile (x > 0) {\\n  x := x - 1}",
    incorrectVariableNames: "Nespr√°vne n√°zvy premenn√Ωch",
    uninitializedVariables: "Neinicializovan√© premenn√©",
    wholeSequenceMode: "Zobrazuje kompletn√Ω strom vykon√°vania. V≈°etky stavy viditeƒæn√© naraz. Najlep≈°ie pre pochopenie cel√©ho toku programu.",
    stepByStepMode: "Interakt√≠vna navig√°cia cez stavy. Tlaƒçidl√° Dopredu/Sp√§≈• pre pohyb. Detailn√Ω pohƒæad na ka≈æd√Ω prechod.",
    guessNextStateMode: "Praktika predpovedania nasleduj√∫ceho stavu programu. Okam≈æit√° sp√§tn√° v√§zba na predpovede. Uƒçenie sa pravidiel operaƒçnej s√©mantiky.",
    guessAllStatesMode: "Re≈æim v√Ωzvy pre kompletn√© vykonanie. Testovanie pochopenia toku programu. Komplexn√° uƒçebn√° sk√∫senos≈•.",
    programFlow: "Full program flow",
    navigation: "Interactive navigation",
    controls: "Forward/Back control",
    transitions: "State transitions",
    nextState: "Next State",
    predictNext: "Predict next",
    getFeedback: "Get feedback",
    learnRules: "Learn rules",
    challengeMode: "Challenge mode",
    testKnowledge: "Test knowledge",
    masterFlow: "Master flow",
    states: "Stavy",
    guessStateLabel: "Uh√°dnu≈• stav",
    valuePlaceholder: "Hodnota",
    variableName: "N√°zov premennej",
    valueLabel: "Hodnota",
    variableNamePlaceholder: "N√°zov premennej",
    wholeTree: "Cel√Ω strom",
    retryModalTitle: "Sk√∫si≈• znova?",
    retryModalText: "Chcete to sk√∫si≈• znova?",
    retryModalYes: "√Åno",
    retryModalNo: "Nie",
    incorrectAnswer: "Nespr√°vne. Sk√∫ste znova!",
    cancelButton: "Zru≈°i≈•",
    correctAnswer: "Spr√°vna odpoveƒè!",
  },
};

function updateLanguage(language) {
  const isRightButtonActive = document.getElementById('right-click-button').classList.contains('active');
  localStorage.setItem("selectedMode", isRightButtonActive ? "whole" : "step");

  localStorage.setItem("selectedLanguage", language);
  const t = translations[language];

  document.querySelectorAll('[data-i18n]').forEach(element => {
    const key = element.getAttribute('data-i18n');
    if (t[key]) {
      element.textContent = t[key];
    }
  });

  document.querySelectorAll('.input-var').forEach(input => {
    input.placeholder = t.variableNamePlaceholder;
  });

  document.querySelectorAll('.input-value').forEach(input => {
    input.placeholder = t.valuePlaceholder;
  });

  document.querySelectorAll('.variable-input-container').forEach(container => {
    const nameInput = container.querySelector('input[type="text"]:first-child');
    const valueInput = container.querySelector('input[type="text"]:last-child');
    const nameLabel = container.querySelector('.variable-name-label');
    const valueLabel = container.querySelector('.value-label');

    if (nameInput && nameLabel) {
      nameLabel.textContent = t.variableName + ': ';
    }
    if (valueInput && valueLabel) {
      valueLabel.textContent = t.valueLabel + ': ';
    }
  });


  document.querySelectorAll('[data-i18n-dynamic]').forEach(element => {
    const key = element.getAttribute('data-i18n-dynamic');
    const state = element.getAttribute('data-state');
    if (t[key] && state) {
      element.innerHTML = `${t[key]} \\(${state}\\): `;
      if (window.MathJax) {
        MathJax.typeset([element]);
      }
    }
  });

  const stateLabel = document.querySelector('#guessFinalStates span');
  if (stateLabel) {
    const stateMatch = stateLabel.innerHTML.match(/\\(.*\\)/);
    if (stateMatch) {
      const stateNumber = stateMatch[0];
      stateLabel.innerHTML = `${t.guessStateLabel} ${stateNumber}: `;
      if (window.MathJax) {
        MathJax.typeset([stateLabel]);
      }
    }
  }

  const mainTitle = document.querySelector(".main-title");
  if (mainTitle) mainTitle.textContent = t.mainTitle;


  const helpModal = document.querySelector(".help-modal");
  if (helpModal) {
    helpModal.querySelector(".modal-title").textContent = t.helpTitle;
    helpModal.querySelectorAll(".tab-button").forEach((button) => {
      const tabId = button.getAttribute("data-tab");
      button.textContent = t[`tab${tabId.charAt(0).toUpperCase() + tabId.slice(1)}`];
    });

    const tabContents = {
      basic: [
        {
          header: t.programInput,
          items: [
            { strong: t.textEditor, text: t.writeProgram },
            { strong: t.examples, text: t.pasteExampleDesc },
            { strong: t.fileUpload, text: t.loadProgram },
          ],
        },
        {
          header: t.variablesManagement,
          items: [
            { strong: t.addingVariables, text: t.clickPlus },
            { strong: t.removingVariables, text: t.clickMinus },
            { strong: t.settingValues, text: t.enterNameValue },
          ],
        },
        {
          header: t.visualizationOptions,
          items: [
            { strong: t.wholeSequence, text: t.wholeSequenceDesc },
            { strong: t.stepByStep, text: t.stepByStepDesc },
            { strong: t.exportButton, text: t.exportDesc },
          ],
        },
      ],
      jane: [
        {
          header: t.basicSyntax,
          items: [
            { strong: t.variables, text: t.variablesDesc },
            { strong: t.operations, text: t.operationsDesc },
            { strong: t.conditions, text: t.conditionsDesc },
            { strong: t.loops, text: t.loopsDesc },
          ],
        },
        {
          header: t.examplePrograms,
          items: [{ code: t.exampleCode }],
        },
        {
          header: t.commonMistakes,
          items: [
            { text: t.incorrectVariableNames },
            { text: t.uninitializedVariables },
          ],
        },
      ],
      modes: [
        {
          header: t.executionModes,
          items: [
            {
              strong: t.wholeSequence,
              text: t.wholeSequenceMode,
            },
            {
              strong: t.stepByStep,
              text: t.stepByStepMode,
            },
          ],
        },
        {
          header: t.learningModes,
          items: [
            {
              strong: t.guessNextState,
              text: t.guessNextStateMode,
            },
            {
              strong: t.guessAllStatesButton,
              text: t.guessAllStatesMode,
            },
          ],
        },
      ],
    };

    Object.entries(tabContents).forEach(([tab, sections]) => {
      const contentElement = helpModal.querySelector(`#${tab}-content`);
      if (!contentElement) return;

      contentElement.innerHTML = `<h3>${t[`${tab}Title`]}</h3>`;

      sections.forEach((section) => {
        const sectionDiv = document.createElement("div");
        sectionDiv.className = "feature-section";
        sectionDiv.innerHTML = `<h4>${section.header}</h4><ul></ul>`;
        const ul = sectionDiv.querySelector("ul");

        section.items.forEach((item) => {
          const li = document.createElement("li");
          if (item.strong) {
            li.innerHTML = `<strong>${item.strong}:</strong> ${item.text}`;
          } else if (item.code) {
            const pre = document.createElement("pre");
            const code = document.createElement("code");
            code.textContent = item.code;
            pre.appendChild(code);
            li.appendChild(pre);
          } else {
            li.textContent = item.text;
          }
          ul.appendChild(li);
        });

        contentElement.appendChild(sectionDiv);
      });
    });
  }

  const elements = {
    helpButton: t.helpButton,
    Example1: t.Example1,
    Example2: t.Example2,
    Example3: t.Example3,
    uploadProgramButton: t.uploadProgramButton,
    visualizeButton: t.visualizeButton,
    plusButton: t.plusButton,
    minusButton: t.minusButton,
    'right-click-button': t.wholeTree,
    'left-click-button': t.stepByStep,
    guessAllStatesButton: t.guessAllStatesButton,
    enterAllStates: t.enterAllStates,
    exportButton: t.exportButton,
    "export-latex-button": t.exportLatexButton,
    "copy-latex": t.copyButton,
    forwardButton: t.forwardButton,
    backButton: t.backButton,
    guessNextState: t.guessNextState,
    "check-button": t.checkButton,
    "cancelGuessButton": t.cancelButton,
    "cancelGuessAllStatesButton": t.cancelButton,
  };

  Object.entries(elements).forEach(([id, text]) => {
    const element = document.getElementById(id);
    if (element) element.textContent = text;
  });

  const pasteExampleIcon = document.querySelector(".material-icons.icon");
  if (pasteExampleIcon) pasteExampleIcon.textContent = t.pasteExample;

  const variablesLabel = document.querySelector(".variables-label");
  if (variablesLabel) variablesLabel.textContent = t.modalSetVariables;

  const switchElement = document.getElementById("button-switch");
  const leftButton = document.getElementById("left-click-button");
  const rightButton = document.getElementById("right-click-button");

  if (switchElement && leftButton && rightButton) {
    leftButton.classList.remove("active");
    rightButton.classList.remove("active");

    const savedMode = localStorage.getItem("selectedMode");

    if (savedMode === "whole") {
      rightButton.classList.add("active");
      updateSwitchPosition("right-click-button");
    } else {
      leftButton.classList.add("active");
      updateSwitchPosition("left-click-button");
    }
  }

  const latexModalTitle = document.querySelector('#latexModal h3');
  if (latexModalTitle) {
    latexModalTitle.textContent = t.latexExportLabel;
  }

  const retryModal = document.getElementById('retryModal');
  if (retryModal) {
    const title = retryModal.querySelector('h3');
    const text = retryModal.querySelector('p');
    const yesButton = retryModal.querySelector('.yes-button');
    const noButton = retryModal.querySelector('.no-button');

    if (title) title.textContent = t.retryModalTitle;
    if (text) text.textContent = t.retryModalText;
    if (yesButton) yesButton.textContent = t.retryModalYes;
    if (noButton) noButton.textContent = t.retryModalNo;
  }

  const resultElement = document.getElementById("result");
  if (resultElement && resultElement.innerHTML.includes("retryInlineBtn")) {
    resultElement.innerHTML = `‚ùå ${t.incorrectAnswer} ` +
      `<button id='retryInlineBtn' class='retry-inline-btn'>
      </button>`;
    resultElement.style.color = "red";
    document.getElementById('retryInlineBtn').onclick = function() {
      resultElement.innerText = '';
    };
  }

  const guessFinalStates = document.getElementById('guessFinalStates');
  if (guessFinalStates) {
    const valueInputs = guessFinalStates.querySelectorAll('input.input-value, input[type="text"]');
    valueInputs.forEach(input => {
      if (input.placeholder !== undefined) {
        input.placeholder = t.valuePlaceholder;
      }
    });
  }
}

function updateSwitchPosition(activeButtonId) {
  const activeButton = document.getElementById(activeButtonId);
  const switchElement = document.getElementById("button-switch");
  const buttonBox = document.querySelector(".button-box");

  if (activeButton && switchElement && buttonBox) {
    const buttonRect = activeButton.getBoundingClientRect();
    const containerRect = buttonBox.getBoundingClientRect();

    const relativeLeft = buttonRect.left - containerRect.left;

    switchElement.style.width = `${buttonRect.width}px`;
    switchElement.style.left = `${relativeLeft}px`;

    if (activeButtonId === "right-click-button") {
      const maxLeft = containerRect.width - buttonRect.width;
      switchElement.style.left = `${maxLeft}px`;
    }
  }
}

function initializeLanguage() {
  const savedLanguage = localStorage.getItem("selectedLanguage") || "english";
  const languageRadios = document.querySelectorAll('input[name="language"]');

  if (languageRadios) {
    languageRadios.forEach(radio => {
      if (radio.value === savedLanguage) {
        radio.checked = true;
      }
      updateLanguage(savedLanguage);
    });
  }
}

function setupLanguagePicker() {
  const languageRadios = document.querySelectorAll('input[name="language"]');
  if (languageRadios) {
    languageRadios.forEach(radio => {
      radio.addEventListener("change", function() {
        if (this.checked) {
          updateLanguage(this.value);
        }
      });
    });
  }
}

function initializeMode() {
  const savedMode = localStorage.getItem("selectedMode") || "step";
  const leftButton = document.getElementById("left-click-button");
  const rightButton = document.getElementById("right-click-button");

  if (leftButton && rightButton) {
    leftButton.classList.remove("active");
    rightButton.classList.remove("active");

    if (savedMode === "whole") {
      rightButton.classList.add("active");
      updateSwitchPosition("right-click-button");
    } else {
      leftButton.classList.add("active");
      updateSwitchPosition("left-click-button");
    }
  }
}

function setupModeButtons() {
  const leftButton = document.getElementById('left-click-button');
  const rightButton = document.getElementById('right-click-button');

  leftButton.addEventListener('click', () => {
    leftButton.classList.add('active');
    rightButton.classList.remove('active');
    updateButtonVisibility();
  });

  rightButton.addEventListener('click', () => {
    rightButton.classList.add('active');
    leftButton.classList.remove('active');
    updateButtonVisibility();
  });
}

document.addEventListener('DOMContentLoaded', function() {
  initializeMode();
  setupModeButtons();
});

function updateButtonVisibility() {
  const isStepByStep = document.getElementById('left-click-button').classList.contains('active');
  const isWholeTree = document.getElementById('right-click-button').classList.contains('active');

  document.getElementById('exportButton').classList.toggle('visible', isWholeTree);
  document.getElementById('export-latex-button').classList.toggle('visible', isWholeTree);

  document.getElementById('guessNextState').style.display = isStepByStep ? 'inline-block' : 'none';
  document.getElementById('check-button').style.display = 'none';
  document.getElementById('guessAllStatesButton').style.display = isStepByStep ? 'inline-block' : 'none';
  document.getElementById('enterAllStates').style.display = 'none';
}

function getCurrentTranslations() {
  const currentLang = localStorage.getItem("selectedLanguage") || "english";
  return translations[currentLang];
}

export { updateLanguage, initializeLanguage, setupLanguagePicker, getCurrentTranslations };
